/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

package equationPlotter.InputFrame;
import equationPlotter.PlottingFrame.GraphFrame;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

public class InputFrame extends JFrame {

    /** Creates new form Antenna */
    public InputFrame() {
        initComponents();
        constants = new Double[] {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};
        constantText_a.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent evt){
                constantText_aDocumentChanged(evt);
            }
            
            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent evt){}
            
            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent evt){}
        });
        
        constantText_b.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent evt){
                constantText_bDocumentChanged(evt);
            }
            
            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent evt){}
            
            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent evt){}
        });
        
        constantText_c.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent evt){
                constantText_cDocumentChanged(evt);
            }
            
            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent evt){}
            
            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent evt){}
        });
        
        constantText_d.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent evt){
                constantText_dDocumentChanged(evt);
            }
            
            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent evt){}
            
            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent evt){}
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        jDialog1 = new javax.swing.JDialog();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jPanel3 = new javax.swing.JPanel();
        plotButton = new javax.swing.JButton();
        FunctionPanel = new javax.swing.JPanel();
        functionLabel_f = new javax.swing.JLabel();
        functionLabel_g = new javax.swing.JLabel();
        functionLabel_h = new javax.swing.JLabel();
        constantPanel = new javax.swing.JPanel();
        constantLabel_a = new javax.swing.JLabel();
        constantLabel_b = new javax.swing.JLabel();
        constantLabel_c = new javax.swing.JLabel();
        constantText_c = new javax.swing.JTextField();
        constantText_b = new javax.swing.JTextField();
        constantText_a = new javax.swing.JTextField();
        constantLabel_d = new javax.swing.JLabel();
        constantText_d = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        Function_f_comboBox = new javax.swing.JComboBox<>();
        Function_h_comboBox = new javax.swing.JComboBox<>();
        Function_g_comboBox = new javax.swing.JComboBox<>();
        FunctionModePanel = new javax.swing.JPanel();
        functionModeLabel_f = new javax.swing.JLabel();
        functionModeLabel_g = new javax.swing.JLabel();
        functionModeLabel_h = new javax.swing.JLabel();
        functionMode_f_comboBox = new javax.swing.JComboBox<>();
        functionMode_g_comboBox = new javax.swing.JComboBox<>();
        functionMode_h_comboBox = new javax.swing.JComboBox<>();
        colorRed = new javax.swing.JPanel();
        colorGreen = new javax.swing.JPanel();
        colorBlue = new javax.swing.JPanel();
        headerLabel = new javax.swing.JLabel();
        aboutButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        org.jdesktop.layout.GroupLayout jDialog1Layout = new org.jdesktop.layout.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GRAPH PLOTTER");
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 800, 700));
        setName(""); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        plotButton.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        plotButton.setText("PLOT");
        plotButton.setEnabled(false);
        plotButton.setHideActionText(true);
        plotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotButtonActionPerformed(evt);
            }
        });

        FunctionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Function ...", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 18), new java.awt.Color(51, 51, 255))); // NOI18N
        FunctionPanel.setEnabled(false);
        FunctionPanel.setOpaque(false);

        functionLabel_f.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        functionLabel_f.setText("f (x) :");
        functionLabel_f.setEnabled(false);

        functionLabel_g.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        functionLabel_g.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        functionLabel_g.setText("g (x) :");
        functionLabel_g.setEnabled(false);

        functionLabel_h.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        functionLabel_h.setText("h (x) : ");
        functionLabel_h.setEnabled(false);

        constantPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter Constants ...", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 18), new java.awt.Color(51, 0, 255))); // NOI18N
        constantPanel.setEnabled(false);

        constantLabel_a.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        constantLabel_a.setText("a :");
        constantLabel_a.setEnabled(false);

        constantLabel_b.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        constantLabel_b.setText("b :");
        constantLabel_b.setEnabled(false);

        constantLabel_c.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        constantLabel_c.setText("c :");
        constantLabel_c.setEnabled(false);

        constantText_c.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        constantText_c.setText("1");
        constantText_c.setEnabled(false);

        constantText_b.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        constantText_b.setText("1");
        constantText_b.setEnabled(false);

        constantText_a.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        constantText_a.setText("1");
        constantText_a.setEnabled(false);

        constantLabel_d.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        constantLabel_d.setText("d :");
        constantLabel_d.setEnabled(false);

        constantText_d.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        constantText_d.setText("1");
        constantText_d.setEnabled(false);

        org.jdesktop.layout.GroupLayout constantPanelLayout = new org.jdesktop.layout.GroupLayout(constantPanel);
        constantPanel.setLayout(constantPanelLayout);
        constantPanelLayout.setHorizontalGroup(
            constantPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(constantPanelLayout.createSequentialGroup()
                .add(33, 33, 33)
                .add(constantPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(constantLabel_d, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(constantLabel_a, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, constantLabel_b, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, constantLabel_c, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(constantPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(constantPanelLayout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(constantPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, constantText_b)
                            .add(constantText_a)))
                    .add(constantPanelLayout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(constantPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(constantText_c, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                            .add(constantText_d))))
                .add(25, 25, 25))
        );
        constantPanelLayout.setVerticalGroup(
            constantPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(constantPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(constantPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(constantLabel_a, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(constantText_a, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(constantPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(constantLabel_b)
                    .add(constantText_b, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(constantPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(constantLabel_c)
                    .add(constantText_c, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(constantPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(constantLabel_d)
                    .add(constantText_d, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Function_f_comboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        Function_f_comboBox.setEnabled(false);
        Function_f_comboBox.setName(""); // NOI18N
        Function_f_comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Function_f_comboBoxItemStateChanged(evt);
            }
        });

        Function_h_comboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        Function_h_comboBox.setEnabled(false);
        Function_h_comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Function_h_comboBoxItemStateChanged(evt);
            }
        });

        Function_g_comboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        Function_g_comboBox.setEnabled(false);
        Function_g_comboBox.setName(""); // NOI18N
        Function_g_comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Function_g_comboBoxItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Function_g_comboBox, 0, 290, Short.MAX_VALUE)
            .add(Function_f_comboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(Function_h_comboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(Function_f_comboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(31, 31, 31)
                .add(Function_g_comboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(Function_h_comboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(24, 24, 24))
        );

        org.jdesktop.layout.GroupLayout FunctionPanelLayout = new org.jdesktop.layout.GroupLayout(FunctionPanel);
        FunctionPanel.setLayout(FunctionPanelLayout);
        FunctionPanelLayout.setHorizontalGroup(
            FunctionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(FunctionPanelLayout.createSequentialGroup()
                .add(FunctionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(FunctionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(FunctionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(functionLabel_f)
                            .add(functionLabel_h, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(functionLabel_g, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(constantPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        FunctionPanelLayout.setVerticalGroup(
            FunctionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, FunctionPanelLayout.createSequentialGroup()
                .add(constantPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .add(FunctionPanelLayout.createSequentialGroup()
                .add(21, 21, 21)
                .add(FunctionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(FunctionPanelLayout.createSequentialGroup()
                        .add(functionLabel_f, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(30, 30, 30)
                        .add(functionLabel_g, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(functionLabel_h, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(26, 26, 26))))
        );

        FunctionModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Function Mode ...", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 0, 18), new java.awt.Color(51, 51, 255))); // NOI18N

        functionModeLabel_f.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        functionModeLabel_f.setText("f (x) :");

        functionModeLabel_g.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        functionModeLabel_g.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        functionModeLabel_g.setText("g (x) :");

        functionModeLabel_h.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        functionModeLabel_h.setText("h (x) : ");

        functionMode_f_comboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        functionMode_f_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Function Mode ...", "Trigonometric Function", "Polynomial Function", "Conic Section", "Exponential Function" }));
        functionMode_f_comboBox.setName(""); // NOI18N
        functionMode_f_comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                functionMode_f_comboBoxItemStateChanged(evt);
            }
        });

        functionMode_g_comboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        functionMode_g_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Function Mode ...", "Trigonometric Function", "Polynomial Function", "Conic Section", "Exponential Function" }));
        functionMode_g_comboBox.setName(""); // NOI18N
        functionMode_g_comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                functionMode_g_comboBoxItemStateChanged(evt);
            }
        });

        functionMode_h_comboBox.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        functionMode_h_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Function Mode ...", "Trigonometric Function", "Polynomial Function", "Conic Section", "Exponential Function" }));
        functionMode_h_comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                functionMode_h_comboBoxItemStateChanged(evt);
            }
        });

        colorRed.setBackground(new java.awt.Color(255, 0, 0));

        org.jdesktop.layout.GroupLayout colorRedLayout = new org.jdesktop.layout.GroupLayout(colorRed);
        colorRed.setLayout(colorRedLayout);
        colorRedLayout.setHorizontalGroup(
            colorRedLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 32, Short.MAX_VALUE)
        );
        colorRedLayout.setVerticalGroup(
            colorRedLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 35, Short.MAX_VALUE)
        );

        colorGreen.setBackground(new java.awt.Color(0, 194, 0));

        org.jdesktop.layout.GroupLayout colorGreenLayout = new org.jdesktop.layout.GroupLayout(colorGreen);
        colorGreen.setLayout(colorGreenLayout);
        colorGreenLayout.setHorizontalGroup(
            colorGreenLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 32, Short.MAX_VALUE)
        );
        colorGreenLayout.setVerticalGroup(
            colorGreenLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 35, Short.MAX_VALUE)
        );

        colorBlue.setBackground(new java.awt.Color(32, 91, 230));

        org.jdesktop.layout.GroupLayout colorBlueLayout = new org.jdesktop.layout.GroupLayout(colorBlue);
        colorBlue.setLayout(colorBlueLayout);
        colorBlueLayout.setHorizontalGroup(
            colorBlueLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 31, Short.MAX_VALUE)
        );
        colorBlueLayout.setVerticalGroup(
            colorBlueLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 38, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout FunctionModePanelLayout = new org.jdesktop.layout.GroupLayout(FunctionModePanel);
        FunctionModePanel.setLayout(FunctionModePanelLayout);
        FunctionModePanelLayout.setHorizontalGroup(
            FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(FunctionModePanelLayout.createSequentialGroup()
                .add(40, 40, 40)
                .add(FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(colorGreen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(colorRed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(colorBlue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(FunctionModePanelLayout.createSequentialGroup()
                        .add(40, 40, 40)
                        .add(FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(functionModeLabel_f, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(functionModeLabel_h, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(FunctionModePanelLayout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(functionModeLabel_g, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, functionMode_g_comboBox, 0, 448, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, functionMode_h_comboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, functionMode_f_comboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        FunctionModePanelLayout.setVerticalGroup(
            FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(FunctionModePanelLayout.createSequentialGroup()
                .add(4, 4, 4)
                .add(FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(FunctionModePanelLayout.createSequentialGroup()
                        .add(FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(functionModeLabel_f, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(functionMode_f_comboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(functionMode_g_comboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(functionModeLabel_g, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(FunctionModePanelLayout.createSequentialGroup()
                        .add(colorRed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(colorGreen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 19, Short.MAX_VALUE)
                .add(FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(FunctionModePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(functionModeLabel_h, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(functionMode_h_comboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(colorBlue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        headerLabel.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        headerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLabel.setText("EQUATION PLOTTER");
        headerLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 8, true));
        headerLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        aboutButton.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        aboutButton.setText("ABOUT");
        aboutButton.setActionCommand("about");
        aboutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aboutButtonMouseClicked(evt);
            }
        });

        helpButton.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        helpButton.setText("HELP");
        helpButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpButtonMouseClicked(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        exitButton.setText("QUIT");
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitButtonMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(81, 81, 81)
                        .add(plotButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(67, 67, 67)
                        .add(aboutButton)
                        .add(66, 66, 66)
                        .add(helpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(67, 67, 67)
                        .add(exitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(209, 209, 209)
                        .add(headerLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 335, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(85, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(32, 32, 32)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(FunctionModePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(FunctionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(0, 41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(headerLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(367, 367, 367)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(FunctionModePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(11, 11, 11)
                        .add(FunctionPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(33, 33, 33)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(plotButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(aboutButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(exitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(helpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showFunction(String functionMode, JComboBox selectedFunctionMode)
    {
        switch (functionMode) {
            
            case "Trigonometric Function":
            
                selectedFunctionMode.addItem("Select Trigonometric Function ...");
                selectedFunctionMode.addItem("a*Sin(bx)");
                selectedFunctionMode.addItem("a*Cos(bx)");
                selectedFunctionMode.addItem("a*Tan(bx)");
                selectedFunctionMode.addItem("a*Sec(bx)");
                selectedFunctionMode.addItem("a*Cosec(bx)");
                selectedFunctionMode.addItem("a*Cot(bx)");
                selectedFunctionMode.addItem("a*arcSin(bx)");
                selectedFunctionMode.addItem("a*arcCos(bx)");
                selectedFunctionMode.addItem("a*arcTan(bx)");
                selectedFunctionMode.addItem("a*arcSec(bx)");
                selectedFunctionMode.addItem("a*arcCosec(bx)");
                selectedFunctionMode.addItem("a*arcCot(bx)");
                selectedFunctionMode.addItem("a*Sinh(bx)");
                selectedFunctionMode.addItem("a*Cosh(bx)");
                selectedFunctionMode.addItem("a*Tanh(bx)");
                selectedFunctionMode.addItem("a*arcSinh(bx)");
                selectedFunctionMode.addItem("a*arcCosh(bx)");
                selectedFunctionMode.addItem("a*arcTanh(bx)");
                break;
            
            case "Polynomial Function":
            
                selectedFunctionMode.addItem("Select Polynomial Equation ...");
                selectedFunctionMode.addItem("1 Degree: y = ax + b");
                selectedFunctionMode.addItem("2 Degree: ax^2 + bx + c");
                selectedFunctionMode.addItem("3 Degree: ax^3 + bx^2 + cx + d");
                break;
            
            case "Conic Section":
            
                selectedFunctionMode.addItem("Select Conic Equation ...");
                selectedFunctionMode.addItem("Circle: (x – a)^2 + (y – b)^2 = c^2");
                selectedFunctionMode.addItem("Ellipse: (x/a)^2 + (y/b)^2 = 1");
                selectedFunctionMode.addItem("Parabola 1: (y-b)^2 = 4c(x-a)");
                selectedFunctionMode.addItem("Parabola 2: (x-a)^2 = 4c(y-b)");
                selectedFunctionMode.addItem("Hyperbola 1:  (x/a)^2 - (y/b)^2 = 1");
                selectedFunctionMode.addItem("Hyperbola 2:  (y/b)^2 - (x/a)^2 = 1");
                selectedFunctionMode.addItem("Rectangular Hyperbola: x*y = a");
                break;    
            
            case "Exponential Function":
            
                selectedFunctionMode.addItem("Select Exponential Function ...");
                selectedFunctionMode.addItem("ln(ax): (base e)");
                selectedFunctionMode.addItem("log(ax): (base 10)");
                selectedFunctionMode.addItem("e^(ax)");
                selectedFunctionMode.addItem("(b/x)^a");
                selectedFunctionMode.addItem("a^(bx)");
                break;
            
            default: 
                
                selectedFunctionMode.setEnabled(false);
                if(Function_f_comboBox.isEnabled() == false)
                {
                    if(Function_g_comboBox.isEnabled() == false)
                    {
                        if(Function_h_comboBox.isEnabled() == false)
                        {
                            plotButton.setEnabled(false);
                            constantPanel.setEnabled(false);
                            FunctionPanel.setEnabled(false);
                        }
                    }
                }
        
        }
    }
    
    private void enterConstants(String Function)
    {
        constantPanel.setEnabled(true);
        constantLabel_a.setEnabled(true);
        constantText_a.setEnabled(true);
                
        switch(Function)
        {
            case "3 Degree: ax^3 + bx^2 + cx + d":
            
                constantLabel_d.setEnabled(true);
                constantText_d.setEnabled(true);
                
            case "Circle: (x – a)^2 + (y – b)^2 = c^2":
                
            case "Parabola 1: (y-b)^2 = 4c(x-a)":
                
            case "Parabola 2: (x-a)^2 = 4c(y-b)":
                
            case "2 Degree: ax^2 + bx + c":
                
                constantLabel_c.setEnabled(true);
                constantText_c.setEnabled(true);
                                
            case "a*Sin(bx)":

            case "a*Cos(bx)":

            case "a*Tan(bx)":

            case "a*Sec(bx)":

            case "a*Cosec(bx)":

            case "a*Cot(bx)":

            case "a*arcSin(bx)":

            case "a*arcCos(bx)":

            case "a*arcTan(bx)":

            case "a*arcSec(bx)":

            case "a*arcCosec(bx)":

            case "a*arcCot(bx)":

            case "a*Sinh(bx)":

            case "a*Cosh(bx)":

            case "a*Tanh(bx)":
                
            case "a*arcSinh(bx)":

            case "a*arcCosh(bx)":

            case "a*arcTanh(bx)":

            case "1 Degree: y = ax + b":

            case "Ellipse: (x/a)^2 + (y/b)^2 = 1":

            case "Hyperbola 1:  (x/a)^2 - (y/b)^2 = 1":

            case "Hyperbola 2:  (y/b)^2 - (x/a)^2 = 1":

            case "(b/x)^a":
                
            case "a^(bx)" :
                      
                constantLabel_b.setEnabled(true);
                constantText_b.setEnabled(true);
                break;
        }
    }

    private void disableConstantPanel()
    {
        constantPanel.setEnabled(false);
        ((javax.swing.border.TitledBorder) constantPanel.getBorder()).setTitle("Enter Constants ...");
        constantLabel_a.setEnabled(false);
        constantText_a.setEnabled(false);
        constantText_a.setText("1");
        constantLabel_b.setEnabled(false);
        constantText_b.setEnabled(false);
        constantText_b.setText("1");
        constantLabel_c.setEnabled(false);
        constantText_c.setEnabled(false);
        constantText_c.setText("1");
        constantLabel_d.setEnabled(false);
        constantText_d.setEnabled(false);
        constantText_d.setText("1");
    }
    
    private void enablePlotButton()
    {
        if((Function_f_comboBox.getSelectedIndex() != 0) && (Function_f_comboBox.getSelectedIndex() != -1))
        {
            plotButton.setEnabled(true);
        }
        else if((Function_g_comboBox.getSelectedIndex() != 0) && (Function_g_comboBox.getSelectedIndex() != -1))
        {
            plotButton.setEnabled(true);
        }
        else if((Function_h_comboBox.getSelectedIndex() != 0) && (Function_h_comboBox.getSelectedIndex() != -1))
        {
            plotButton.setEnabled(true);
        }
        else
        {
            plotButton.setEnabled(false);
        }
    }
    
    private void setFunctions()
    {
        functions = new String[3];
        
        if((Function_f_comboBox.getSelectedIndex() == -1))
        {
            functions[0] = "";
        }
        else    functions[0] = (String) Function_f_comboBox.getSelectedItem(); 
        
        if((Function_g_comboBox.getSelectedIndex() == -1))
        {
            functions[1] = "";
        }
        else    functions[1] = (String) Function_g_comboBox.getSelectedItem(); 
        
        if((Function_h_comboBox.getSelectedIndex() == -1))
        {
            functions[2] = "";
        }
        else    functions[2] = (String) Function_h_comboBox.getSelectedItem(); 
       
    }
    
    private void setColors()
    {
        colors = new Color[3];
        colors[0] = new Color(255,0,0);
        colors[1] = new Color(0,194,0);
        colors[2] = new Color(32,91,230);        
    }
    
    private void functionMode_f_comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_functionMode_f_comboBoxItemStateChanged
        if (java.awt.event.ItemEvent.SELECTED == evt.getStateChange()) 
        {
            FunctionPanel.setEnabled(true);
            functionLabel_f.setEnabled(true);
            Function_f_comboBox.setEnabled(true);
            String functionModeAfterSelection = evt.getItem().toString();
            Function_f_comboBox.removeAllItems();
            showFunction(functionModeAfterSelection, Function_f_comboBox);
            if(Function_f_comboBox.isEnabled() == false)
            {
                functionLabel_f.setEnabled(false);
            }
        }
    }//GEN-LAST:event_functionMode_f_comboBoxItemStateChanged

    private void functionMode_g_comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_functionMode_g_comboBoxItemStateChanged
        if (java.awt.event.ItemEvent.SELECTED == evt.getStateChange()) 
        {
            FunctionPanel.setEnabled(true);
            functionLabel_g.setEnabled(true);
            Function_g_comboBox.setEnabled(true);
            String functionModeAfterSelection = evt.getItem().toString();
            Function_g_comboBox.removeAllItems();
            showFunction(functionModeAfterSelection, Function_g_comboBox);
            if(Function_g_comboBox.isEnabled() == false)
            {
                functionLabel_g.setEnabled(false);
            }
        }
    }//GEN-LAST:event_functionMode_g_comboBoxItemStateChanged

    private void functionMode_h_comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_functionMode_h_comboBoxItemStateChanged
        if (java.awt.event.ItemEvent.SELECTED == evt.getStateChange()) 
        {
            FunctionPanel.setEnabled(true);
            functionLabel_h.setEnabled(true);
            Function_h_comboBox.setEnabled(true);
            String functionModeAfterSelection = evt.getItem().toString();
            Function_h_comboBox.removeAllItems();
            showFunction(functionModeAfterSelection, Function_h_comboBox);
            if(Function_h_comboBox.isEnabled() == false)
            {
                functionLabel_h.setEnabled(false);
            }
        }
    }//GEN-LAST:event_functionMode_h_comboBoxItemStateChanged

    private void Function_f_comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Function_f_comboBoxItemStateChanged
        disableConstantPanel();
        if (java.awt.event.ItemEvent.SELECTED == evt.getStateChange()) 
        {
            String functionAfterSelection = evt.getItem().toString();
            if(Function_f_comboBox.getSelectedIndex() != 0)
            {
                ((javax.swing.border.TitledBorder) constantPanel.getBorder()).setTitle("Enter Constants for f(x) ...");
                constantPanel.setEnabled(true);
                enterConstants(functionAfterSelection);
                for(int i=0; i<4; i++)
                {
                    constants[i] = 1.0;
                }
            }
            enablePlotButton();
        }
    }//GEN-LAST:event_Function_f_comboBoxItemStateChanged

    private void Function_g_comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Function_g_comboBoxItemStateChanged
        disableConstantPanel();
        if (java.awt.event.ItemEvent.SELECTED == evt.getStateChange()) 
        {
            String functionAfterSelection = evt.getItem().toString();
            if(Function_g_comboBox.getSelectedIndex() != 0)
            {
                ((javax.swing.border.TitledBorder) constantPanel.getBorder()).setTitle("Enter Constants for g(x) ...");
                constantPanel.setEnabled(true);
                enterConstants(functionAfterSelection);
                for(int i=4; i<8; i++)
                {
                    constants[i] = 1.0;
                }
            }
            enablePlotButton();
        }
    }//GEN-LAST:event_Function_g_comboBoxItemStateChanged

    private void Function_h_comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Function_h_comboBoxItemStateChanged
        disableConstantPanel();
        if (java.awt.event.ItemEvent.SELECTED == evt.getStateChange()) 
        {
            String functionAfterSelection = evt.getItem().toString();
            if(Function_h_comboBox.getSelectedIndex() != 0)
            {
                ((javax.swing.border.TitledBorder) constantPanel.getBorder()).setTitle("Enter Constants for h(x) ...");
                constantPanel.setEnabled(true);
                enterConstants(functionAfterSelection);
                for(int i=8; i<12; i++)
                {
                    constants[i] = 1.0;
                }
            }
            enablePlotButton();  
        }
    }//GEN-LAST:event_Function_h_comboBoxItemStateChanged

    private void plotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotButtonActionPerformed
         Toolkit.getDefaultToolkit().beep();
        if(plotButton.isEnabled() == true)
        {
            setFunctions();
            setColors();
            System.out.println("\n");
            new GraphFrame(functions, constants, colors);
        }
    }//GEN-LAST:event_plotButtonActionPerformed

    private void aboutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutButtonMouseClicked
        Toolkit.getDefaultToolkit().beep();
        try {
            Desktop.getDesktop().open(new File("C:\\Users\\dell\\Desktop\\GraphPlotter\\src\\equationPlotter\\PlottingFrame\\About.txt"));
        } catch (IOException ex) {
            Logger.getLogger(InputFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_aboutButtonMouseClicked

    private void helpButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpButtonMouseClicked
        Toolkit.getDefaultToolkit().beep();
        try {
            Desktop.getDesktop().open(new File("C:\\Users\\dell\\Desktop\\GraphPlotter\\src\\equationPlotter\\PlottingFrame\\Help.txt"));
        } catch (IOException ex) {
            Logger.getLogger(InputFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_helpButtonMouseClicked

    private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseClicked
        Toolkit.getDefaultToolkit().beep();
        System.exit(0);
    }//GEN-LAST:event_exitButtonMouseClicked
    
    private void constantText_aDocumentChanged(javax.swing.event.DocumentEvent evt){
        String chosenFunctionMode = ((javax.swing.border.TitledBorder) constantPanel.getBorder()).getTitle();
        switch(chosenFunctionMode)
        {
            case "Enter Constants for f(x) ...":
                
                constants[0] = Double.parseDouble(constantText_a.getText());
                break;
                
            case "Enter Constants for g(x) ...":
                
                constants[4] = Double.parseDouble(constantText_a.getText());
                break;
                
            case "Enter Constants for h(x) ...":
                
                constants[8] = Double.parseDouble(constantText_a.getText());
                break;  
        }        
    }
    
    private void constantText_bDocumentChanged(javax.swing.event.DocumentEvent evt){
        String chosenFunctionMode = ((javax.swing.border.TitledBorder) constantPanel.getBorder()).getTitle();
        switch(chosenFunctionMode)
        {
            case "Enter Constants for f(x) ...":
                
                constants[1] = Double.parseDouble(constantText_b.getText());
                break;
                
            case "Enter Constants for g(x) ...":
                
                constants[5] = Double.parseDouble(constantText_b.getText());
                break;
                
            case "Enter Constants for h(x) ...":
                
                constants[9] = Double.parseDouble(constantText_b.getText());
                break;  
        }        
    }
    
    private void constantText_cDocumentChanged(javax.swing.event.DocumentEvent evt){
        String chosenFunctionMode = ((javax.swing.border.TitledBorder) constantPanel.getBorder()).getTitle();
        switch(chosenFunctionMode)
        {
            case "Enter Constants for f(x) ...":
                
                constants[2] = Double.parseDouble(constantText_c.getText());
                break;
                
            case "Enter Constants for g(x) ...":
                
                constants[6] = Double.parseDouble(constantText_c.getText());
                break;
                
            case "Enter Constants for h(x) ...":
                
                constants[10] = Double.parseDouble(constantText_c.getText());
                break;  
        }        
    }
    
    private void constantText_dDocumentChanged(javax.swing.event.DocumentEvent evt){
        String chosenFunctionMode = ((javax.swing.border.TitledBorder) constantPanel.getBorder()).getTitle();
        switch(chosenFunctionMode)
        {
            case "Enter Constants for f(x) ...":
                
                constants[3] = Double.parseDouble(constantText_d.getText());
                break;
                
            case "Enter Constants for g(x) ...":
                
                constants[7] = Double.parseDouble(constantText_d.getText());
                break;
                
            case "Enter Constants for h(x) ...":
                
                constants[11] = Double.parseDouble(constantText_d.getText());
                break;  
        }        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel FunctionModePanel;
    private javax.swing.JPanel FunctionPanel;
    private javax.swing.JComboBox<String> Function_f_comboBox;
    private javax.swing.JComboBox<String> Function_g_comboBox;
    private javax.swing.JComboBox<String> Function_h_comboBox;
    private javax.swing.JButton aboutButton;
    private javax.swing.JPanel colorBlue;
    private javax.swing.JPanel colorGreen;
    private javax.swing.JPanel colorRed;
    private javax.swing.JLabel constantLabel_a;
    private javax.swing.JLabel constantLabel_b;
    private javax.swing.JLabel constantLabel_c;
    private javax.swing.JLabel constantLabel_d;
    private javax.swing.JPanel constantPanel;
    private javax.swing.JTextField constantText_a;
    private javax.swing.JTextField constantText_b;
    private javax.swing.JTextField constantText_c;
    private javax.swing.JTextField constantText_d;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel functionLabel_f;
    private javax.swing.JLabel functionLabel_g;
    private javax.swing.JLabel functionLabel_h;
    private javax.swing.JLabel functionModeLabel_f;
    private javax.swing.JLabel functionModeLabel_g;
    private javax.swing.JLabel functionModeLabel_h;
    private javax.swing.JComboBox<String> functionMode_f_comboBox;
    private javax.swing.JComboBox<String> functionMode_g_comboBox;
    private javax.swing.JComboBox<String> functionMode_h_comboBox;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JButton helpButton;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JButton plotButton;
    private String []functions;
    private Double []constants;
    private Color []colors;
}
